"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("@vtex/api");
const dummyLogger_1 = require("../../clients/dummyLogger");
const telemetryClient_1 = require("../../clients/telemetryClient");
const env = __importStar(require("../../env"));
const timeout_1 = __importDefault(require("../../timeout"));
const clusterHeader = env.cluster() ? { 'x-vtex-upstream-target': env.cluster() } : null;
const DEFAULT_TIMEOUT = 15000;
const defaultOptions = {
    timeout: (timeout_1.default || DEFAULT_TIMEOUT),
    headers: {
        ...clusterHeader,
    },
};
exports.createIOContext = ({ account, authToken, region, userAgent, workspace, }) => {
    return {
        account,
        userAgent,
        workspace,
        authToken,
        region,
        production: false,
        product: '',
        route: {
            id: '',
            params: {},
        },
        requestId: '',
        operationId: '',
        platform: '',
        logger: dummyLogger_1.dummyLogger,
    };
};
const mergeCustomOptionsWithDefault = (customOptions) => {
    const mergedOptions = { ...defaultOptions, ...customOptions };
    mergedOptions.headers = { ...defaultOptions.headers, ...customOptions.headers };
    return mergedOptions;
};
exports.createWorkspaceClient = (ctx, customOptions = {}) => {
    return new api_1.Workspaces(ctx, mergeCustomOptionsWithDefault(customOptions));
};
exports.createTelemetryClient = (ctx, customOptions = {}) => {
    return new telemetryClient_1.TelemetryClient(ctx, mergeCustomOptionsWithDefault(customOptions));
};
