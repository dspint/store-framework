"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("crypto");
const pkg = __importStar(require("../../../package.json"));
const SessionManager_1 = require("../session/SessionManager");
class ErrorReport extends Error {
    constructor({ code, message, originalError, tryToParseError = false, env }) {
        var _a, _b;
        super(message);
        this.timestamp = new Date().toISOString();
        this.code = code;
        this.originalError = originalError;
        this.errorId = crypto_1.randomBytes(8).toString('hex');
        this.env = env;
        this.errorDetails = ErrorReport.getRequestErrorMetadata(this.originalError);
        if (tryToParseError) {
            if ((_b = (_a = this.errorDetails) === null || _a === void 0 ? void 0 : _a.response.data) === null || _b === void 0 ? void 0 : _b.message) {
                this.message = this.errorDetails.response.data.message;
            }
            else {
                this.message = this.originalError.message;
            }
        }
    }
    static createGenericCode(error) {
        if (error.config) {
            return "RequestError" /* REQUEST_ERROR */;
        }
        return "GenericError" /* GENERIC_ERROR */;
    }
    static create(args) {
        const { workspace, account } = SessionManager_1.SessionManager.getSessionManager();
        return new ErrorReport({
            ...args,
            env: {
                account,
                workspace,
                toolbeltVersion: pkg.version,
                nodeVersion: process.version,
                platform: process.platform,
                command: process.argv.slice(2).join(' '),
            },
        });
    }
    static getRequestErrorMetadata(err) {
        if (!err.config) {
            return null;
        }
        const { url, method, headers: requestHeaders, params, data: requestData, timeout: requestTimeout } = err.config;
        const { status, statusText, headers: responseHeaders, data: responseData } = err.response;
        return {
            requestConfig: {
                url,
                method,
                params,
                headers: requestHeaders,
                data: requestData,
                timeout: requestTimeout,
            },
            response: {
                status,
                statusText,
                headers: responseHeaders,
                data: responseData,
            },
        };
    }
    toObject() {
        return {
            errorId: this.errorId,
            timestamp: this.timestamp,
            code: this.code,
            message: this.message,
            errorDetails: this.errorDetails,
            stack: this.stack,
            env: this.env,
        };
    }
    stringify(pretty = false) {
        if (pretty) {
            return JSON.stringify(this.toObject(), null, 2);
        }
        return JSON.stringify(this.toObject());
    }
}
exports.ErrorReport = ErrorReport;
