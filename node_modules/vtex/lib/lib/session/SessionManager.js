"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AuthProviders_1 = require("../auth/AuthProviders");
const Token_1 = require("../auth/Token");
const SessionsPersister_1 = require("./SessionsPersister");
class SessionManager {
    constructor({ sessionsPersister, authProviders }) {
        this.sessionPersister = sessionsPersister;
        this.authProviders = authProviders;
        this.currAccount = this.sessionPersister.getAccount();
        this.currWorkspace = this.sessionPersister.getWorkspace();
        this.currToken = new Token_1.Token(this.sessionPersister.getToken());
    }
    static getSessionManager() {
        if (SessionManager.sessionManagerSingleton) {
            return SessionManager.sessionManagerSingleton;
        }
        const sessionsPersister = SessionsPersister_1.SessionsPersister.getSessionsPersister();
        const authProviders = AuthProviders_1.AuthProviders.getAuthProviders();
        SessionManager.sessionManagerSingleton = new SessionManager({ sessionsPersister, authProviders });
        return SessionManager.sessionManagerSingleton;
    }
    get account() {
        return this.currAccount;
    }
    get token() {
        return this.currToken.token;
    }
    get workspace() {
        return this.currWorkspace;
    }
    get userLogged() {
        return this.currToken.login;
    }
    saveCredentials() {
        this.sessionPersister.saveAccount(this.account);
        this.sessionPersister.saveWorkspace(this.workspace);
        this.sessionPersister.saveLogin(this.currToken.login);
        this.sessionPersister.saveToken(this.currToken.token);
    }
    async login(newAccount, { targetWorkspace = 'master', authMethod = 'oauth', useCachedToken = true }) {
        const currentToken = new Token_1.Token(this.sessionPersister.getAccountToken(newAccount));
        if (useCachedToken && currentToken.isValid()) {
            this.currAccount = newAccount;
            this.currWorkspace = targetWorkspace;
            this.currToken = currentToken;
            this.saveCredentials();
            return;
        }
        const { token } = await this.authProviders[authMethod].login(newAccount, targetWorkspace);
        this.currAccount = newAccount;
        this.currWorkspace = targetWorkspace;
        this.currToken = new Token_1.Token(token);
        this.saveCredentials();
        this.sessionPersister.saveAccountToken(newAccount, this.currToken.token);
    }
    logout() {
        this.sessionPersister.clearData();
    }
    switchWorkspace(newWorkspace) {
        this.currWorkspace = newWorkspace;
        this.sessionPersister.saveWorkspace(this.currWorkspace);
    }
}
exports.SessionManager = SessionManager;
SessionManager.sessionManagerSingleton = null;
