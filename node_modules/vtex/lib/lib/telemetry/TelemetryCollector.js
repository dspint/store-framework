"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const path_1 = require("path");
const pkgJson = __importStar(require("../../../package.json"));
const ErrorReport_1 = require("../error/ErrorReport");
const TelemetryStore_1 = require("./TelemetryStore");
class TelemetryCollector {
    constructor(store) {
        this.store = store;
        this.errors = this.store.getErrors();
        this.metrics = this.store.getMetrics();
    }
    static getCollector() {
        if (!TelemetryCollector.telemetryCollectorSingleton) {
            const store = new TelemetryStore_1.TelemetryLocalStore(`${pkgJson.name}-telemetry-store`);
            TelemetryCollector.telemetryCollectorSingleton = new TelemetryCollector(store);
        }
        return TelemetryCollector.telemetryCollectorSingleton;
    }
    registerError(error) {
        if (error instanceof ErrorReport_1.ErrorReport) {
            this.errors.push(error);
            return error;
        }
        const code = ErrorReport_1.ErrorReport.createGenericCode(error);
        const errorReport = ErrorReport_1.ErrorReport.create({
            code,
            message: error.message,
            originalError: error,
            tryToParseError: true,
        });
        this.errors.push(errorReport);
        return errorReport;
    }
    registerMetric() { }
    flush(forceRemoteFlush = false) {
        const shouldRemoteFlush = forceRemoteFlush || this.errors.length > 0;
        if (!shouldRemoteFlush) {
            this.store.setErrors(this.errors);
            this.store.setMetrics(this.metrics);
            return;
        }
        this.store.setErrors([]);
        this.store.setMetrics({});
        const obj = {
            errors: this.errors.map(err => err.toObject()),
            metrics: this.metrics,
        };
        child_process_1.spawn(process.execPath, [path_1.join(__dirname, 'TelemetryReporter.js'), this.store.storeName, JSON.stringify(obj)], {
            detached: true,
            stdio: 'ignore',
        }).unref();
    }
}
exports.TelemetryCollector = TelemetryCollector;
