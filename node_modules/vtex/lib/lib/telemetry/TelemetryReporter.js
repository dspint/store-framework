"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const env_1 = require("../../env");
const user_agent_1 = __importDefault(require("../../user-agent"));
const clients_1 = require("../clients");
const SessionManager_1 = require("../session/SessionManager");
const TelemetryStore_1 = require("./TelemetryStore");
class TelemetryReporter {
    constructor(telemetryClient) {
        this.telemetryClient = telemetryClient;
    }
    static getTelemetryReporter() {
        const { account, workspace, token } = SessionManager_1.SessionManager.getSessionManager();
        const telemetryClient = clients_1.createTelemetryClient(clients_1.createIOContext({
            account,
            workspace,
            authToken: token,
            userAgent: user_agent_1.default,
            region: env_1.region(),
        }), { retries: TelemetryReporter.RETRIES, timeout: TelemetryReporter.TIMEOUT });
        return new TelemetryReporter(telemetryClient);
    }
    reportErrors(errors) {
        return this.telemetryClient.reportErrors(errors);
    }
}
exports.TelemetryReporter = TelemetryReporter;
TelemetryReporter.RETRIES = 3;
TelemetryReporter.TIMEOUT = 30 * 1000;
const start = async () => {
    try {
        const store = new TelemetryStore_1.TelemetryLocalStore(process.argv[2]);
        const telemetryObj = JSON.parse(process.argv[3]);
        const reporter = TelemetryReporter.getTelemetryReporter();
        await reporter.reportErrors(telemetryObj.errors);
        store.setLastRemoteFlush(Date.now());
        process.exit();
    }
    catch (err) {
        console.log(err);
        process.exit(1);
    }
};
if (require.main === module) {
    start();
}
