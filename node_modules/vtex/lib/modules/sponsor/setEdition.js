"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const ramda_1 = __importDefault(require("ramda"));
const sponsor_1 = require("../../clients/sponsor");
const conf = __importStar(require("../../conf"));
const errors_1 = require("../../errors");
const logger_1 = __importDefault(require("../../logger"));
const utils_1 = require("../apps/utils");
const switch_1 = __importDefault(require("../auth/switch"));
const prompts_1 = require("../prompts");
const utils_2 = require("../utils");
const promptSwitchToAccount = async (account, initial) => {
    const reason = initial
        ? `Initial edition can only be set by ${chalk_1.default.blue(account)} account`
        : `Only current account sponsor (${chalk_1.default.blue(account)}) can change its edition`;
    const proceed = await prompts_1.promptConfirm(`${reason}. Do you want to switch to account ${chalk_1.default.blue(account)}?`);
    if (!proceed) {
        throw new errors_1.UserCancelledError();
    }
    await switch_1.default(account, {});
};
exports.default = async (edition) => {
    const previousConf = conf.getAll();
    const previousAccount = previousConf.account;
    const previousWorkspace = previousConf.workspace;
    const workspaceNotice = previousWorkspace === 'master' ? '' : ` in workspace ${chalk_1.default.blue(previousWorkspace)}`;
    logger_1.default.info(`Changing edition of account ${chalk_1.default.blue(previousAccount)}${workspaceNotice}.`);
    const sponsorClient = new sponsor_1.Sponsor(utils_2.getIOContext(), utils_2.IOClientOptions);
    const data = await sponsorClient.getSponsorAccount();
    const sponsorAccount = ramda_1.default.prop('sponsorAccount', data);
    if (!sponsorAccount) {
        if (previousWorkspace !== 'master') {
            throw new errors_1.CommandError('Can only set initial edition in master workspace');
        }
        await promptSwitchToAccount('vtex', true);
    }
    else {
        if (previousWorkspace === 'master') {
            await utils_1.promptWorkspaceMaster(previousAccount);
        }
        await promptSwitchToAccount(sponsorAccount, false);
    }
    try {
        const sponsorClientForSponsorAccount = new sponsor_1.Sponsor(utils_2.getIOContext(), utils_2.IOClientOptions);
        await sponsorClientForSponsorAccount.setEdition(previousAccount, previousWorkspace, edition);
        logger_1.default.info(`Successfully changed edition${workspaceNotice} of account ${chalk_1.default.blue(previousAccount)}.`);
    }
    catch (ex) {
        logger_1.default.error(`Failed to change edition of account ${chalk_1.default.blue(previousAccount)}.`);
        throw ex;
    }
    finally {
        await utils_2.switchToPreviousAccount(previousConf);
    }
};
