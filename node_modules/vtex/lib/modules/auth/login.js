"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const enquirer_1 = __importDefault(require("enquirer"));
const ramda_1 = require("ramda");
const conf = __importStar(require("../../conf"));
const SessionManager_1 = require("../../lib/session/SessionManager");
const logger_1 = __importDefault(require("../../logger"));
const prompts_1 = require("../prompts");
const boxen_1 = __importDefault(require("boxen"));
const emojic_1 = __importDefault(require("emojic"));
const [cachedAccount, cachedLogin, cachedWorkspace] = [conf.getAccount(), conf.getLogin(), conf.getWorkspace()];
const details = cachedAccount && `${chalk_1.default.green(cachedLogin)} @ ${chalk_1.default.green(cachedAccount)} / ${chalk_1.default.green(cachedWorkspace)}`;
const promptUsePrevious = () => prompts_1.promptConfirm(`Do you want to use the previous login details? (${details})`);
const promptAccount = async (promptPreviousAcc) => {
    if (promptPreviousAcc) {
        const confirm = await prompts_1.promptConfirm(`Use previous account? (${chalk_1.default.blue(cachedAccount)})`);
        if (confirm) {
            return cachedAccount;
        }
    }
    const account = ramda_1.prop('account', await enquirer_1.default.prompt({
        type: 'input',
        result: s => s.trim(),
        message: 'Account:',
        name: 'account',
        validate: s => /^\s*[\w-]+\s*$/.test(s) || 'Please enter a valid account.',
    }));
    return account;
};
const notifyRelease = () => {
    const RELEASE_NOTES_DATE = 'January 2020';
    const RELEASE_NOTES_URL = 'https://bit.ly/32GuM6U';
    const msg = [
        `Are you up-to-date with the VTEX IO latest news?`,
        `${emojic_1.default.memo} Donâ€™t forget to check out our ${chalk_1.default.bold.green(`${RELEASE_NOTES_DATE} Release Notes:`)}`,
        `${chalk_1.default.blueBright(RELEASE_NOTES_URL)}`,
    ].join('\n');
    const boxOptions = {
        padding: 1,
        margin: 1,
        borderStyle: "round" /* Round */,
        borderColor: 'yellow',
        align: 'center',
    };
    console.log(boxen_1.default(msg, boxOptions));
};
exports.default = async (options) => {
    var _a;
    const defaultArgumentAccount = (_a = options === null || options === void 0 ? void 0 : options._) === null || _a === void 0 ? void 0 : _a[0];
    const optionAccount = options ? options.a || options.account || defaultArgumentAccount : null;
    const optionWorkspace = options ? options.w || options.workspace : null;
    const usePrevious = !(optionAccount || optionWorkspace) && details && (await promptUsePrevious());
    const account = optionAccount || (usePrevious && cachedAccount) || (await promptAccount(cachedAccount && optionWorkspace));
    const workspace = optionWorkspace || (usePrevious && cachedWorkspace) || 'master';
    const sessionManager = SessionManager_1.SessionManager.getSessionManager();
    try {
        await sessionManager.login(account, { targetWorkspace: workspace, useCachedToken: false });
        logger_1.default.debug('Login successful', sessionManager.userLogged, account, sessionManager.token, workspace);
        logger_1.default.info(`Logged into ${chalk_1.default.blue(account)} as ${chalk_1.default.green(sessionManager.userLogged)} at workspace ${chalk_1.default.green(workspace)}`);
        notifyRelease();
    }
    catch (err) {
        if (err.statusCode === 404) {
            logger_1.default.error('Account/Workspace not found');
        }
        else {
            throw err;
        }
    }
};
