"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const child_process_1 = require("child_process");
const path_1 = require("path");
const semver_1 = __importDefault(require("semver"));
const CLIPrecheckerStore_1 = require("./CLIPrecheckerStore");
class CLIPrechecker {
    constructor(store, pkg) {
        this.store = store;
        this.pkg = pkg;
    }
    static getCLIPrechecker(pkgJson) {
        const store = new CLIPrecheckerStore_1.CLIPrecheckerStore(`${pkgJson.name}-prechecker-store`);
        return new CLIPrechecker(store, pkgJson);
    }
    ensureCompatibleNode() {
        const nodeVersion = process.version;
        if (!semver_1.default.satisfies(nodeVersion, this.pkg.engines.node)) {
            const minMajor = this.pkg.engines.node.replace('>=', '');
            const errMsg = chalk_1.default.bold(`Incompatible with node < v${minMajor}. Please upgrade node to major ${minMajor} or higher.`);
            console.error(errMsg);
            process.exit(1);
        }
    }
    ensureNotDeprecated() {
        const deprecated = this.store.getDeprecated();
        if (Date.now() - this.store.getLastDeprecationCheck() >= CLIPrechecker.DEPRECATION_CHECK_INTERVAL) {
            child_process_1.spawn(process.execPath, [path_1.join(__dirname, 'checkForDeprecate.js'), this.store.storeName, this.pkg.name, this.pkg.version], {
                detached: true,
                stdio: 'ignore',
            }).unref();
        }
        if (!deprecated)
            return;
        const errMsg = chalk_1.default.bold(`This version ${this.pkg.version} was deprecated. Please update to the latest version: ${chalk_1.default.green('yarn global add vtex')}.`);
        console.error(errMsg);
        process.exit(1);
    }
    runChecks() {
        this.ensureCompatibleNode();
        this.ensureNotDeprecated();
    }
}
exports.CLIPrechecker = CLIPrechecker;
CLIPrechecker.DEPRECATION_CHECK_INTERVAL = 4 * 3600 * 1000;
